-- Load Vape UI Library
local lib = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/UI-Libs/main/Vape.txt"))()

-- Create Main Window
local win = lib:Window("Optimal Jump Location", Color3.fromRGB(44, 120, 224), Enum.KeyCode.RightControl)

-- Create a New Tab
local tab = win:Tab("Jump Helper")

-- Initialize Services
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

-- Initialize Variables
local OptimalJumpEnabled = false -- Toggle Variable for Optimal Jump Feature
local dot -- Part representing the optimal jump location
local predictionColor = Color3.fromRGB(255, 255, 255) -- Default dot color
local eventConnection

-- Function to Calculate Optimal Jump Location
local function calculateOptimalJumpLocation(gravity, velocity, position, timeToJump)
    local g = gravity
    local t = timeToJump

    -- Calculate where the ball will be after the given time
    local futurePosition = position + velocity * t + 0.5 * g * t * t

    -- Optimal jump location on the ground
    local optimalLocation = Vector3.new(futurePosition.X, Workspace.CurrentCamera.CFrame.Position.Y, futurePosition.Z)
    return optimalLocation
end

-- Function to Show Optimal Jump Location
local function showOptimalJumpLocation()
    if not OptimalJumpEnabled then return end

    -- If the dot already exists, remove it
    if dot then
        dot:Destroy()
    end

    -- Create a dot part for visualization
    dot = Instance.new("Part")
    dot.Shape = Enum.PartType.Ball
    dot.Size = Vector3.new(2, 2, 2) -- Small dot
    dot.Color = predictionColor -- Set to chosen color
    dot.Anchored = true
    dot.CanCollide = false
    dot.Transparency = 0.5
    dot.Parent = Workspace

    -- Connect to the event when the ball is added
    eventConnection = workspace.ChildAdded:Connect(function(b)
        if b.Name == "Football" and b:IsA("BasePart") then
            task.wait()

            local velocity = b.Velocity
            local position = b.Position

            -- Calculate optimal jump location
            local optimalLocation = calculateOptimalJumpLocation(Vector3.new(0, -28, 0), velocity, position, 1.5) -- Adjust time as needed

            -- Update the position of the dot to the calculated optimal jump location
            dot.Position = optimalLocation

            -- Continuously update the dot's position while the ball is moving
            local updateConnection
            updateConnection = RunService.Heartbeat:Connect(function()
                if b.Velocity.Magnitude > 0.1 then
                    -- Recalculate the location dynamically based on the current ball state
                    optimalLocation = calculateOptimalJumpLocation(Vector3.new(0, -28, 0), b.Velocity, b.Position, 1.5)
                    dot.Position = optimalLocation
                else
                    -- Ball is no longer moving; remove the dot
                    dot:Destroy()
                    updateConnection:Disconnect()
                end
            end)
            
            -- Remove dot when the ball is caught or disappears
            task.spawn(function()
                repeat task.wait() until b.Parent ~= workspace
                dot:Destroy()
                updateConnection:Disconnect()
            end)
        end
    end)
end

-- Add UI Elements
tab:Toggle("Enable Optimal Jump Location", false, function(state)
    OptimalJumpEnabled = state

    if OptimalJumpEnabled then
        showOptimalJumpLocation()
    elseif dot then
        dot:Destroy()
    end
end)

-- Optional: Add a color picker to change the dot's color
tab:Colorpicker("Dot Color", predictionColor, function(newColor)
    predictionColor = newColor
    if dot then
        dot.Color = newColor
    end
end)
